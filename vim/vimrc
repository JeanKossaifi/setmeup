set nocompatible
" Install vim-plug if needed: now done in the setup script
" if empty(glob('~/.vim/autoload/plug.vim'))
"   " set modifiable
"   silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
"     \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
"   autocmd VimEnter * PlugInstall | source $MYVIMRC
" endif
" Add the plugins
call plug#begin('~/.vim/plugged')

	" Icons for plugins 
	Plug 'ryanoasis/vim-devicons'

	" Nice color theme
	Plug 'sainnhe/sonokai'

    " Git plugin: Gstatus, Gedit, Gdiff
    " Plug 'tpope/vim-fugitive'
	" Gutter
	" Plug 'airblade/vim-gitgutter'
    
    " gundo, displays undo tree
    Plug 'sjl/gundo.vim'
    
    " Autocomplete
    " Plug 'davidhalter/jedi-vim'
	" Plug 'maralla/validator.vim'
	" Plug 'maralla/completor.vim'
    
    " Nerd-tree
    Plug 'scrooloose/nerdtree'
    
    " Air-line
    " Plug 'vim-airline/vim-airline'
	" Light-line
	Plug 'itchyny/lightline.vim'
    
    " On the flight syntax check
    " Plug 'w0rp/ale'
    
    " Auto doc-strings (on def, :Pydocstring or <C-l>)
    Plug 'heavenshell/vim-pydocstring'

    " Better indentation for Python
    Plug 'vim-scripts/indentpython.vim'

    " Plug 'nvie/vim-flake8'

    " Add the 's' (surrounding) option
    " see :help surround
    Plug 'tpope/vim-surround'

	" view css colors in code
	Plug 'ap/vim-css-color'

	" Commentary
	" Use gcc to comment out a line (takes a count), gc to comment out the target of a motion (for example, gcap to comment out a paragraph),
	Plug 'tpope/vim-commentary'

	" Plug 'liuchengxu/vim-which-key'

call plug#end()

" let g:pymode_python = 'python3'
" let g:completor_python_binary = '$HOME/anaconda3/lib/python3.6/site-packages/jedi'
let g:completor_auto_trigger = 1

source ~/.vim/settings.vim
source ~/.vim/keybindings.vim
map <Leader>n :NERDTreeToggle<CR>

" Airline all the time
set laststatus=2


" Details for jedi
"
"
"    Completion <C-Space>
"    Goto assignments <leader>g (typical goto function)
"    Goto definitions <leader>d (follow identifier as far as possible, includes imports and statements)
"    Show Documentation/Pydoc K (shows a popup with assignments)
"    Renaming <leader>r
"    Usages <leader>n (shows all the usages of a name)
"    Open module, e.g. :Pyimport os (opens the os module)


